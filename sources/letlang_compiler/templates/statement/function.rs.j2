#[allow(non_snake_case)]
{% if public %}pub{% else %}pub(crate){% endif %} mod symbol_{{ symbol_name }} {
  use super::*;

  #[allow(non_camel_case_types)]
  #[derive(Debug, Clone, PartialEq)]
  pub struct func_{{ symbol_name }} {
    {% for type_param in type_params %}
      {{ type_param }}: Box<dyn Type>,
    {% endfor %}
  }

  impl Function for func_{{ symbol_name }} {
    fn call(
      &self,
      context: Arc<Mutex<TaskContext>>,
      args: Vec<Value>,
    ) -> FunctionContinuation {
      async fn code_block(
        co: FunctionCoroutine,
        context: Arc<Mutex<TaskContext>>,
        args: Vec<Value>,
      ) -> Value {
        helpers::assert_param_count(
          &co,
          context.clone(),
          {{ call_param_count }},
          args.len(),
        ).await;

        {% for call_param in call_params %}
          let paramtype_{{ loop.index0 }} = {{ call_param.type_code }};
          let paramval_{{ loop.index0 }} = &args[{{ loop.index0 }}];
          helpers::assert_type(
            &co,
            context.clone(),
            &paramtype_{{ loop.index0 }},
            &paramval_{{ loop.index0 }},
          ).await;
        {% endfor %}

        let return_type = {{ return_type }};

        let mut locals = Locals::new(None);

        {% for proposition in body %}
          {% if loop.last %}
            let result = {{ proposition }};
            helpers::assert_type(
              &co,
              context.clone(),
              &return_type,
              &result,
            ).await;

            result
          {% else %}
            {{ proposition }};
          {% endif %}
        {% endfor %}
      }

      FunctionContinuation::new_boxed(|co| code_block(co, context, args))
    }
  }
}
