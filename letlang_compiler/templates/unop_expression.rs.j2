{
  let expr = {{ expression }};
  let op_res = {{ fn_op }}(
    &co,
    context.clone(),
    &expr,
  ).await;

  match op_res {
    Ok(val) => val,
    Err(()) => {
      let exc = Value::Tuple(vec![
        Value::Primitive(PrimitiveValue::Atom(
          context.lock().unwrap().get_atom("@binop_error")
        )),
        Value::Primitive(PrimitiveValue::String(
          format!(
            "operation {{ op }} {:?} not supported",
            expr,
          )
        )),
      ]);
      co.yield_(FunctionInterruption::Exception(exc)).await;
      unreachable!();
    }
  }
}
