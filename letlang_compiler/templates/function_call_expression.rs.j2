{
  let func = crate::symbol_{{ func_name }}::func_{{ func_name }} {};
  let args: Vec<Value> = vec![
    {% for call_param in call_params %}
      {{ call_param }},
    {% endfor %}
  ];

  let mut block = func.call(context.clone(), args);

  let ignored = Value::Primitive(PrimitiveValue::Boolean(bool::default()));
  let mut state = block.resume_with(ignored);

  let func_result = loop {
    match state {
      GeneratorState::Yielded(interrupt) => {
        let res = co.yield_(interrupt.clone()).await;
        state = block.resume_with(res);
      },
      GeneratorState::Complete(res) => {
        break res;
      }
    }
  };

  func_result
}
