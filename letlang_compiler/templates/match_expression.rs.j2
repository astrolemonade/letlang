{
  let val = {{ expression }};
  {% for clause in clauses %}
    let clause_{{ loop.index }} = {{ clause.pattern }};
  {% endfor %}

  {% for clause in clauses %}
    {% if loop.first %}
      if clause_{{ loop.index }}.has(&co, context.clone(), &val).await {
        {% for expression in clause.body %}
          {% if not loop.last %}
            {{ expression }};
          {% else %}
            {{ expression }}
          {% endif %}
        {% endfor %}
      }
    {% else %}
      else if clause_{{ loop.index }}.has(&co, context.clone(), &val).await {
        {% for expression in clause.body %}
          {% if not loop.last %}
            {{ expression }};
          {% else %}
            {{ expression }}
          {% endif %}
        {% endfor %}
      }
    {% endif %}
  {% endfor %}
  else {
    let exc = Value::Tuple(vec![
      Value::Primitive(PrimitiveValue::Atom(
        context.lock().unwrap().get_atom("@match_error")
      )),
      Value::Primitive(PrimitiveValue::String(
        format!("value {:?} did not match any clause", val)
      )),
    ]);
    co.yield_(FunctionInterruption::Exception(exc)).await;
    unreachable!();
  }
}